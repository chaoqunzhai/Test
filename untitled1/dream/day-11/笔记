
进程: 一个程序需要运行所需的资源的集合
每个进程数据是独立的
每个进程里至少有一个线程
每个进程里有可以多有个线程
线程数据是共享的


一个线程至少在一个进程里运行。 没有可比性。

一个进程的多个线程可以充分利用多核CPU,  其他语言可以  py不可以

线程是共享进程内的数据。

multiprocessing
    pipe
    queue
    实现的是进程间的数据传递，通信

    manager:实现了多进程间的数据共享

    进程间共享数据的代价是高昂的,所以要尽量避免进程间的数据共享

    线程间的数据本来就是共享的
    线程要修改同一份数据，必须加锁，互斥锁mutex,

    join 等待线程结束,

    envent ：
        线程间交互

生产着消费者
    解耦
    提高程序运行效率: 把中间等待的时间省去


    queue
        FIFO
        LIFO
        Pioriity(优先级)


   线程切换是上下文切换

   多线程: I0密集型 不占用CPU    socket 爬虫 web

   进程: CPU运行密集型， 金融分析  这样用的IO就少   大量的运算，如果切换了进程 就会慢



协程:  又是微线程

CPU不知道这个的存在，用户态的轻量级线程

1.必须在只有一个


spawn 产生的意思

当进程为阻塞状态,其实不占用CPU资源

内核态==>用户态
程序是不能直接去访问硬件资源的。实际上是系统给程序一个接口  然后程序去调用，然后返回

底层linux 如果是1024的 那底层就是select  如果修改了 那就是poll

epoll 没有文件描述符限制