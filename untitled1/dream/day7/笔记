os.popen("dir").read()        #会保存命令的执行结果输出

subprocess


实例化 就是过程   d=Dog('dahong','5')  传参数
实例：就是实例化后然后调用 即d.sayhai()




class 中   传参数 必须用__init__
类 --->>实例化--->> 实例对象

__init__ : 构造函数   实例化就自动执行init方法  如：r1 = Role('Alex','police','AK47’) #生成一个角色   会自动把参数传给Role下面的__init__(...)方法

self.name = name  #属性，成员变量，字段

def sayhai()  # 方法，动态属性


公有属性 : 在类里直接定义的属性，即是公有属性


私有属性 :只能内部访问，外部不能访问
           def get_heart(self)：      #对外部提供只读访问接口
               return sel._heart
        r1._Role__heart   #强制访问私有属性

析构方法：



对象就是 一个类的实例化后实例

类的特性：

封装
    1.防止数据被随意修改
    2.使外部程序不需要关注对象内部的构造，只需要通过次对象，对外提供的接口进行直接访问即可
继承
    1.通过父类->>子类的方式以最小代码量的实现不同角色的共同点 ，和不同点，

多态


经典类 VS 新式类
         Persion.__init__(self,name,age)   #经典类写法
         super(Teacher，self).__init__(self,name,age)  #新式类写法    其中Teacher 是子类
         ！！用新式类！！！
         多继承时 继承顺序的区别
         python2 就是深度查询
         python3 就是广度查询



什么是类，什么是对象
    类就是一个函数的集合

    class 类：
        def 函数1（）:
            pass
        def 函数2（）：
            pass
    #实例化的过程
    对象=类（)

    对象.函数1（）

静态方法：（可以有任意个参数）


def talk(self) :   # 这是构造函数  如何不需要传参数 可以这样写